const dotenv = require('dotenv');
const path = require('path');

const envFile = process.env.NODE_ENV === 'production'
  ? '.env.production'
  : process.env.NODE_ENV === 'test'
    ? '.env.test'
    : '.env';

try {
  const result = dotenv.config({ path: path.resolve(process.cwd(), envFile) });
  if (result.error) {
    console.warn(`Warning: ${envFile} file not found. Using existing environment variables.`);
  }
} catch (error) {
  console.warn(`Warning: Error loading ${envFile} file. Using existing environment variables.`);
}

const requiredEnvVars = ['MONGO_URI', 'JWT_SECRET']; 

const missingEnvVars = requiredEnvVars.filter(
  envVar => !process.env[envVar]
);

if (missingEnvVars.length > 0) {
  console.warn(`Warning: Missing recommended environment variables: ${missingEnvVars.join(', ')}`);
  console.warn('The application will attempt to use default values where possible.');
  
  if (!process.env.MONGO_URI) {
    process.env.MONGO_URI = 'mongodb+srv://admin:12123@marketing-manager.kokhud8.mongodb.net/?retryWrites=true&w=majority&appName=marketing-manager';
    console.warn(`Using default MONGO_URI: ${process.env.MONGO_URI}`);
  }
  
  if (!process.env.JWT_SECRET) {
    process.env.JWT_SECRET = '84d440a074c0800147b6e95960f7dc62ce9799ebdf73c45b223c8b8f7486a356';
    console.warn('WARNING: Using a default JWT_SECRET. This is not secure for production!');
  }
}

if (process.env.JWT_SECRET && process.env.JWT_SECRET.length < 32) {
  console.warn('WARNING: JWT_SECRET is too short. It should be at least 32 characters long.');
}

module.exports = {
  env: process.env.NODE_ENV || 'development',
  port: process.env.PORT || 5000,
  mongoUri: process.env.MONGO_URI,
  jwtSecret: process.env.JWT_SECRET,
  jwtExpiresIn: process.env.JWT_EXPIRES_IN || '1d',
  
  isProd: process.env.NODE_ENV === 'production',
  isDev: process.env.NODE_ENV === 'development' || !process.env.NODE_ENV,
  isTest: process.env.NODE_ENV === 'test',
  
  logLevel: process.env.LOG_LEVEL || (process.env.NODE_ENV === 'production' ? 'error' : 'debug'),
  
  allowedOrigins: process.env.ALLOWED_ORIGINS 
    ? process.env.ALLOWED_ORIGINS.split(',') 
    : ['http://localhost:3000']
};